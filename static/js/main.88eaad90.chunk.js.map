{"version":3,"sources":["assets/images/avia-logo.svg","components/Ticket/Ticket.jsx","components/filters.js","components/Filters/Filters.jsx","components/TicketsSearch.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledPaper","withStyles","theme","root","margin","spacing","padding","Paper","timeCalculator","dateCode","duration","arrivedStamp","Number","Date","dateFormatter","toLocaleString","hour","minute","Ticket","ticketInfo","Grid","item","xs","elevation","container","style","display","alignItems","Typography","color","variant","price","width","height","alt","src","carrier","marginTop","marginBottom","segments","origin","destination","date","Math","floor","stops","length","map","stop","i","arr","title","value","checked","useStylesCheckbox","makeStyles","backgroundColor","useStylesWrapper","paddingLeft","transition","borderRadius","Filters","checkboxFilters","onChangeHandlerFilters","checkboxClasses","wrapperClasses","FormGroup","row","filter","index","FormControlLabel","className","key","control","Checkbox","onChange","label","createMuiTheme","palette","primary","main","secondary","typography","h4","fontSize","fontWeight","subtitle1","subtitle2","StyledToggleButtonGroup","ToggleButtonGroup","StyledToggleButton","flexGrow","text","selected","ToggleButton","TicketsSearch","useState","allTickets","setAllTickets","sortedAndFilteredTickets","setSortedAndFilteredTickets","showTickets","setShowTickets","loading","setLoading","loadingMore","setLoadingMore","ticketPage","setTicketPage","sortedBy","setSortedBy","filtersInfo","filters","setFilters","sortParam","useRef","filtersParams","sortTickets","tickets","sortedTickets","param","sort","ticket1","ticket2","filterTickets","trueFilters","ticket","matches","forEach","useEffect","current","slice","filteredTickets","a","fetch","response","status","json","ticketsRequestHelper","searchId","newTickets","ticketsData","filteredAndSortedTickets","ticketsRequest","initializationRequest","ThemeProvider","Container","maxWidth","justify","logo","newState","exclusive","aria-label","e","CircularProgress","Button","startIcon","onClick","setTimeout","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88eaad90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avia-logo.0c089234.svg\";","import React from 'react'\r\nimport { Grid, Paper, withStyles, Typography } from '@material-ui/core'\r\n\r\nconst StyledPaper = withStyles((theme) => ({\r\n   root: {\r\n      margin: theme.spacing(2, 0),\r\n      padding: '20px'\r\n   }\r\n}))(Paper)\r\n\r\nfunction Ticket({ ticketInfo }) {\r\n   return (\r\n      <Grid item xs={12}>\r\n         <StyledPaper elevation={3}>\r\n            <Grid container>\r\n               <Grid style={{ display: 'flex', alignItems: 'center' }} item xs={4}>\r\n                  <Typography color=\"primary\" variant=\"h4\">\r\n                     {ticketInfo.price} Р\r\n                  </Typography>\r\n               </Grid>\r\n               <Grid item xs={4}></Grid>\r\n               <Grid style={{ display: 'flex' }} item xs={4}>\r\n                  <img style={{ width: 'auto', height: '36px' }} alt=\"\" src={`http://pics.avs.io/99/36/${ticketInfo.carrier}.png`} />\r\n               </Grid>\r\n            </Grid>\r\n            <Grid style={{ marginTop: '20px' }} container>\r\n               <Grid item xs={4}>\r\n                  <Grid item style={{ marginBottom: '10px' }}>\r\n                     <Typography color=\"secondary\" variant=\"subtitle2\">\r\n                        {ticketInfo.segments[0].origin} - {ticketInfo.segments[0].destination}\r\n                     </Typography>\r\n                     <Typography variant=\"subtitle1\">\r\n                        {dateFormatter(ticketInfo.segments[0].date)} - {timeCalculator(ticketInfo.segments[0].date, ticketInfo.segments[0].duration)}\r\n                     </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                     <Typography color=\"secondary\" variant=\"subtitle2\">\r\n                        {ticketInfo.segments[1].origin} - {ticketInfo.segments[1].destination}\r\n                     </Typography>\r\n                     <Typography variant=\"subtitle1\">\r\n                        {dateFormatter(ticketInfo.segments[1].date)} - {timeCalculator(ticketInfo.segments[1].date, ticketInfo.segments[0].duration)}\r\n                     </Typography>\r\n                  </Grid>\r\n               </Grid>\r\n               <Grid item xs={4}>\r\n                  <Grid item style={{ marginBottom: '10px' }}>\r\n                     <Typography color=\"secondary\" variant=\"subtitle2\">\r\n                        В ПУТИ\r\n                     </Typography>\r\n                     <Typography variant=\"subtitle1\">\r\n                        {Math.floor(ticketInfo.segments[0].duration / 60)}ч {ticketInfo.segments[0].duration % 60}м\r\n                     </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                     <Typography color=\"secondary\" variant=\"subtitle2\">\r\n                        В ПУТИ\r\n                     </Typography>\r\n                     <Typography variant=\"subtitle1\">\r\n                        {Math.floor(ticketInfo.segments[1].duration / 60)}ч {ticketInfo.segments[1].duration % 60}м\r\n                     </Typography>\r\n                  </Grid>\r\n               </Grid>\r\n               <Grid item xs={4}>\r\n                  <Grid item style={{ marginBottom: '10px' }}>\r\n                     <Typography color=\"secondary\" variant=\"subtitle2\">\r\n                        ПЕРЕСАДКИ:\r\n                     </Typography>\r\n                     <Typography variant=\"subtitle1\">\r\n                        {\r\n                           ticketInfo.segments[0].stops.length === 0\r\n                              ? 'Без пересадок'\r\n                              : ticketInfo.segments[0].stops.map((stop, i, arr) => {\r\n                                 if (arr.length - 1 !== i) {\r\n                                    return stop + ', '\r\n                                 } else {\r\n                                    return stop\r\n                                 }\r\n                              })\r\n                        }\r\n                     </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                     <Typography color=\"secondary\" variant=\"subtitle2\">\r\n                        ПЕРЕСАДКИ:\r\n                     </Typography>\r\n                     <Typography variant=\"subtitle1\">\r\n                        {\r\n                           ticketInfo.segments[1].stops.length === 0\r\n                              ? 'Без пересадок'\r\n                              : ticketInfo.segments[1].stops.map((stop, i, arr) => {\r\n                                 if (arr.length - 1 !== i) {\r\n                                    return stop + ', '\r\n                                 } else {\r\n                                    return stop\r\n                                 }\r\n                              })\r\n                        }\r\n                     </Typography>\r\n                  </Grid>\r\n               </Grid>\r\n            </Grid>\r\n         </StyledPaper>\r\n      </Grid>\r\n   )\r\n}\r\n\r\nfunction timeCalculator(dateCode, duration) {\r\n\r\n   let arrivedStamp = Number(new Date(dateCode)) + duration * 60 * 1000;\r\n   let arrivedTime = new Date(arrivedStamp);\r\n   return dateFormatter(arrivedTime);\r\n\r\n}\r\n\r\nfunction dateFormatter(dateCode) {\r\n\r\n   return (new Date(dateCode)).toLocaleString('ru', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n   })\r\n\r\n}\r\n\r\nexport default Ticket\r\n","export default [\r\n   {\r\n      title: 'Все',\r\n      value: 'all',\r\n      checked: true\r\n   },\r\n   {\r\n      title: 'Без пересадок',\r\n      value: 0,\r\n      checked: false\r\n   },\r\n   {\r\n      title: '1 пересадка',\r\n      value: 1,\r\n      checked: false\r\n   },\r\n   {\r\n      title: '2 пересадки',\r\n      value: 2,\r\n      checked: false\r\n   },\r\n   {\r\n      title: '3 пересадки',\r\n      value: 3,\r\n      checked: false\r\n   }\r\n];","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStylesCheckbox = makeStyles({\r\n   root: {\r\n      padding: '10px',\r\n      '&&:hover': {\r\n         backgroundColor: 'transparent'\r\n      }\r\n   }\r\n});\r\n\r\nconst useStylesWrapper = makeStyles({\r\n   root: {\r\n      width: '100%',\r\n      margin: 0,\r\n      paddingLeft: '10px',\r\n      transition: 'all 0.3s',\r\n      '&&:hover': {\r\n         backgroundColor: '#F1FCFF'\r\n      },\r\n      '&:last-child': {\r\n         borderRadius: '0 0 5px 5px'\r\n      }\r\n   }\r\n});\r\n\r\n\r\n\r\nfunction Filters({checkboxFilters, onChangeHandlerFilters}) {\r\n\r\n   const checkboxClasses = useStylesCheckbox();\r\n   const wrapperClasses = useStylesWrapper()\r\n\r\n   return (\r\n      <Paper elevation={3}>\r\n         <Typography variant=\"subtitle2\" style={{ padding: '20px 0 0 20px' }}>\r\n            КОЛИЧЕСТВО ПЕРЕСАДОК\r\n         </Typography>\r\n         <FormGroup row>\r\n            {\r\n               checkboxFilters.map((filter, index) => {\r\n                  return (\r\n                     <FormControlLabel\r\n                        className={wrapperClasses.root}\r\n                        key={index}\r\n                        control={\r\n                           <Checkbox\r\n                              className={checkboxClasses.root}\r\n                              checked={filter.checked}\r\n                              onChange={() => onChangeHandlerFilters(index)}\r\n                              color=\"primary\"\r\n                           />\r\n                        }\r\n                        label={filter.title}\r\n                     />\r\n                  )\r\n               })\r\n            }\r\n         </FormGroup>\r\n      </Paper>\r\n   )\r\n}\r\n\r\nexport default Filters\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport logo from './../assets/images/avia-logo.svg'\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { withStyles, CircularProgress, Button } from '@material-ui/core';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Ticket from './Ticket/Ticket';\r\nimport filtersInfo from './filters';\r\nimport FiltersFields from './Filters/Filters.jsx';\r\n\r\n\r\nconst theme = createMuiTheme({\r\n   palette: {\r\n      primary: {\r\n         main: '#2196F3'\r\n      },\r\n      secondary: {\r\n         main: '#A0B0B9'\r\n      },\r\n   },\r\n   typography: {\r\n      h4: {\r\n         fontSize: '24px',\r\n         fontWeight: 500\r\n      },\r\n      subtitle1: {\r\n         fontSize: '14px',\r\n         fontWeight: 'bold'\r\n      },\r\n      subtitle2: {\r\n         fontSize: '12px',\r\n         fontWeight: 'bold'\r\n      }\r\n   }\r\n})\r\n\r\nconst StyledToggleButtonGroup = withStyles(() => ({\r\n   root: {\r\n      display: 'flex'\r\n   }\r\n}))(ToggleButtonGroup);\r\n\r\nconst StyledToggleButton = withStyles((theme) => ({\r\n   root: {\r\n      padding: '15px 0',\r\n      flexGrow: '1',\r\n      color: theme.palette.text.primary,\r\n      backgroundColor: '#fff',\r\n      '&&:hover': {\r\n         backgroundColor: '#F1FCFF'\r\n      }\r\n   },\r\n   selected: {\r\n      backgroundColor: '#2196F3 !important',\r\n      color: '#fff !important'\r\n   },\r\n}))(ToggleButton);\r\n\r\nfunction TicketsSearch() {\r\n\r\n   const pageSize = 5;\r\n\r\n   const [allTickets, setAllTickets] = useState([]);\r\n   const [sortedAndFilteredTickets, setSortedAndFilteredTickets] = useState([]);\r\n   const [showTickets, setShowTickets] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n   const [loadingMore, setLoadingMore] = useState(false);\r\n   const [ticketPage, setTicketPage] = useState(1);\r\n   const [sortedBy, setSortedBy] = useState('byPrice');\r\n   const [filters, setFilters] = useState(filtersInfo);\r\n\r\n   const sortParam = useRef(sortedBy);\r\n   const filtersParams = useRef(filters);\r\n\r\n   const onChangeHandlerFilters = (index) => {\r\n      //index or id\r\n      let newState = [...filters];\r\n\r\n      if (filters[index].value !== 'all') {\r\n         // first elem anyway 'all' value\r\n         newState[0].checked = false;\r\n         newState[index].checked = !newState[index].checked;\r\n         if (newState.filter(filter => filter.checked).length === 0) {\r\n            newState[0].checked = true; \r\n         }\r\n\r\n\r\n      } else {\r\n         newState = newState.map(filter => {\r\n            if (filter.value === 'all') {\r\n               filter.checked = true;\r\n               return filter;\r\n            } else {\r\n               filter.checked = false;\r\n               return filter;\r\n            }\r\n         })\r\n      }\r\n\r\n      setFilters(newState);\r\n\r\n   }\r\n\r\n   const onChangeHandlerSort = (e, sortParam) => {\r\n      if (sortParam) {\r\n         setSortedBy(sortParam);\r\n      }\r\n   }\r\n\r\n   const loadTickets = () => {\r\n\r\n      setLoadingMore(true);\r\n      // fake request\r\n      setTimeout(() => {\r\n\r\n         let newState = [...showTickets, ...sortedAndFilteredTickets.slice(ticketPage * pageSize, ticketPage * pageSize + pageSize)];\r\n         setShowTickets(newState);         \r\n         setLoadingMore(false);\r\n         setTicketPage(ticketPage + 1);\r\n\r\n      }, 2000)\r\n\r\n   }\r\n\r\n   const sortTickets = (tickets, param = 'byPrice') => {\r\n\r\n      let sortedTickets;\r\n\r\n      if (param === 'byPrice') {\r\n\r\n         sortedTickets = [...tickets.sort(({ price: priceA }, { price: priceB }) => priceA - priceB)];\r\n\r\n      }\r\n\r\n      if (param === 'byDuration') {\r\n\r\n         sortedTickets = [...tickets.sort((ticket1, ticket2) => {\r\n\r\n            let duration1 = ticket1.segments[0].duration;\r\n            let duration2 = ticket2.segments[0].duration;\r\n            return duration1 - duration2;\r\n\r\n         })];\r\n\r\n      }\r\n\r\n      return sortedTickets;\r\n\r\n   }\r\n\r\n   // only for stops filter\r\n   const filterTickets = (tickets, filters) => {\r\n\r\n      let trueFilters = filters.filter(filter => filter.checked);\r\n\r\n      let filteredTickets = tickets.filter(ticket => {\r\n\r\n         let matches = false;\r\n\r\n         trueFilters.forEach(filter => {\r\n\r\n            if (filter.value === 'all') {\r\n               matches = true;\r\n            } else {\r\n               if (ticket.segments[0].stops.length === filter.value) matches = true;\r\n            }\r\n\r\n         })\r\n\r\n         return matches;\r\n\r\n      })\r\n\r\n      return filteredTickets;\r\n\r\n   }\r\n\r\n   useEffect(() => {\r\n\r\n      sortParam.current = sortedBy;\r\n\r\n      let sortedTickets = sortTickets(sortedAndFilteredTickets, sortedBy);\r\n      setSortedAndFilteredTickets(sortedTickets);\r\n      setShowTickets(sortedTickets.slice(0, pageSize));\r\n\r\n   }, [sortedBy])\r\n\r\n   useEffect(() => {\r\n\r\n      filtersParams.current = filters;\r\n\r\n      let filteredTickets = filterTickets(allTickets, filters);\r\n      let sortedAndFilteredTickets = sortTickets(filteredTickets, sortedBy);\r\n      setSortedAndFilteredTickets(sortedAndFilteredTickets);\r\n      setShowTickets(sortedAndFilteredTickets.slice(0, pageSize));\r\n\r\n   }, [filters, allTickets, sortedBy])\r\n\r\n   useEffect(() => {\r\n\r\n      async function initializationRequest() {\r\n\r\n         //initialization search\r\n         setLoading(true);\r\n\r\n         let response = await fetch('https://front-test.beta.aviasales.ru/search');\r\n\r\n         if (response.status === 200) {\r\n\r\n            let searchData = await response.json();\r\n            ticketsRequestHelper(searchData.searchId);\r\n\r\n         }\r\n\r\n      }\r\n\r\n      function ticketsRequestHelper(searchId) {\r\n\r\n         let newTickets = [];\r\n\r\n         (async function ticketsRequest() {\r\n            let response = await fetch(`https://front-test.beta.aviasales.ru/tickets?searchId=${searchId}`);\r\n\r\n            if (response.status === 200) {\r\n\r\n               let ticketsData = await response.json();\r\n               newTickets = [...newTickets, ...ticketsData.tickets];\r\n\r\n\r\n               if (!ticketsData.stop) {\r\n\r\n                  ticketsRequest(searchId);\r\n\r\n               } else {\r\n\r\n                  setAllTickets(newTickets);\r\n                  let sortedTickets = sortTickets(newTickets, sortParam.current)\r\n                  let filteredAndSortedTickets = filterTickets(sortedTickets, filtersParams.current);\r\n                  setSortedAndFilteredTickets(filteredAndSortedTickets);\r\n                  setShowTickets(filteredAndSortedTickets.slice(0, pageSize));\r\n                  setLoading(false);\r\n\r\n               }\r\n\r\n            } else {\r\n\r\n               //repeat request if server error\r\n               ticketsRequest(searchId);\r\n\r\n            }\r\n         })()\r\n\r\n      }\r\n\r\n      if (!loading && allTickets.length === 0) {\r\n         initializationRequest();\r\n      }\r\n\r\n   }, [allTickets, loading])\r\n\r\n\r\n   return (\r\n      <ThemeProvider theme={theme}>\r\n         <Container maxWidth=\"md\">\r\n            <Grid container justify=\"center\">\r\n               <img src={logo} alt=\"\" />\r\n            </Grid>\r\n            <Grid container spacing={2}>\r\n\r\n               {/* Filters */}\r\n               <Grid item xs={3}>\r\n                  <FiltersFields\r\n                     checkboxFilters={filters}\r\n                     onChangeHandlerFilters={onChangeHandlerFilters}\r\n                  />\r\n               </Grid>\r\n\r\n               <Grid item xs={7}>\r\n\r\n                  {/* Sorted field */}\r\n                  <Grid item xs={12}>\r\n                     <StyledToggleButtonGroup\r\n                        value={sortedBy}\r\n                        exclusive\r\n                        aria-label=\"sorted field\"\r\n                        onChange={onChangeHandlerSort}\r\n                     >\r\n                        <StyledToggleButton value=\"byPrice\">\r\n                           САМЫЙ ДЕШЕВЫЙ\r\n                        </StyledToggleButton>\r\n                        <StyledToggleButton value=\"byDuration\">\r\n                           САМЫЙ БЫСТРЫЙ\r\n                        </StyledToggleButton>\r\n                     </StyledToggleButtonGroup>\r\n                  </Grid>\r\n\r\n                  {\r\n                     loading ?\r\n                        <Grid container justify=\"center\" style={{marginTop: '50px'}}>\r\n                           <CircularProgress color=\"primary\" />\r\n                        </Grid>\r\n                        :\r\n                        <>\r\n                           {\r\n                              showTickets.map((ticket, index) => {\r\n                                 return (\r\n                                    <Ticket\r\n                                       key={index}\r\n                                       ticketInfo={ticket}\r\n                                    />\r\n                                 )\r\n                              })\r\n                           }\r\n                           <Grid container justify=\"center\" style={{marginBottom: '20px'}}>\r\n                              <Button\r\n                                 variant=\"contained\"\r\n                                 color=\"primary\"\r\n                                 startIcon={\r\n                                    loadingMore && <CircularProgress style={{ width: '25px', height: '25px' }} color=\"white\" />\r\n                                 }\r\n                                 onClick={loadTickets}\r\n                                 disabled={loadingMore}\r\n                              >\r\n                                 {\r\n                                    loadingMore ?\r\n                                    'Загрузка...' :\r\n                                    'Загрузить ещё' \r\n                                    \r\n                                 }\r\n                              </Button>\r\n                           </Grid>\r\n                        </>\r\n                  }\r\n\r\n               </Grid>\r\n            </Grid>\r\n         </Container>\r\n      </ThemeProvider >\r\n   )\r\n}\r\n\r\nexport default TicketsSearch\r\n","import React from 'react';\nimport TicketsSearch from './components/TicketsSearch';\n\nfunction App() {\n   return (\n      <TicketsSearch />\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}